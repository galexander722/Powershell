#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: dbc6353c-dd24-4564-817b-03d63b6d41b3
# Source File: C:\Users\Galex\OneDrive\Documents\SAPIEN\PowerShell Studio\Files\Getme.psf
#------------------------------------------------------------------------

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2024 v5.8.242 (L)
     Generated on:       6/26/2024 11:47 PM
     Generated by:       Galex
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2024
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-Getme_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formViewODSystemInformat = New-Object 'System.Windows.Forms.Form'
	$buttonQueryDrives = New-Object 'System.Windows.Forms.Button'
	$buttonQueryNIC = New-Object 'System.Windows.Forms.Button'
	$buttonQuery = New-Object 'System.Windows.Forms.Button'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$labelDNSNameOrIP = New-Object 'System.Windows.Forms.Label'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formViewODSystemInformat_Load = {
		#TODO: Initialize Form Controls here
		Set-ControlTheme $formViewODSystemInformat -Theme Dark
	}
	
	$darkToolStripMenuItem_Click = {
		#TODO: Place custom script here
		Set-ControlTheme -Control $formViewODSystemInformat -Theme Dark
	}
	
	$lightToolStripMenuItem_Click = {
		Set-ControlTheme -Control $formViewODSystemInformat -Theme Light
	}
	
	#region Control Theme Helper Function
	<#
		.SYNOPSIS
			Applies a theme to the control and its children.
		
		.PARAMETER Control
			The control to theme. Usually the form itself.
		
		.PARAMETER Theme
			The color theme:
			Light
			Dark
	
		.PARAMETER CustomColor
			A hashtable that contains the color values.
			Keys:
			WindowColor
			ContainerColor
			BackColor
			ForeColor
			BorderColor
			SelectionForeColor
			SelectionBackColor
			MenuSelectionColor
		.EXAMPLE
			PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
		
		.EXAMPLE
			PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
		.NOTES
			Created by SAPIEN Technologies, Inc.
	#>
	function Set-ControlTheme
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.ComponentModel.Component]$Control,
			[ValidateSet('Light', 'Dark')]
			[string]$Theme = 'Dark',
			[System.Collections.Hashtable]$CustomColor
		)
		
		$Font = [System.Drawing.Font]::New('Segoe UI', 9)
		
		#Initialize the colors
		if ($Theme -eq 'Dark')
		{
			$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
			$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
			$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
			$ForeColor = [System.Drawing.Color]::White
			$BorderColor = [System.Drawing.Color]::DimGray
			$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
			$SelectionForeColor = [System.Drawing.Color]::White
			$MenuSelectionColor = [System.Drawing.Color]::DimGray
		}
		else
		{
			$WindowColor = [System.Drawing.Color]::White
			$ContainerColor = [System.Drawing.Color]::WhiteSmoke
			$BackColor = [System.Drawing.Color]::Gainsboro
			$ForeColor = [System.Drawing.Color]::Black
			$BorderColor = [System.Drawing.Color]::DimGray
			$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
			$SelectionForeColor = [System.Drawing.Color]::White
			$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
		}
		
		if ($CustomColor)
		{
			#Check and Validate the custom colors:
			$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
			if ($Color) { $WindowColor = $Color }
			$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
			if ($Color) { $ContainerColor = $Color }
			$Color = $CustomColor.BackColor -as [System.Drawing.Color]
			if ($Color) { $BackColor = $Color }
			$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
			if ($Color) { $ForeColor = $Color }
			$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
			if ($Color) { $BorderColor = $Color }
			$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
			if ($Color) { $SelectionBackColor = $Color }
			$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
			if ($Color) { $SelectionForeColor = $Color }
			$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
			if ($Color) { $MenuSelectionColor = $Color }
		}
		
		#Define the custom renderer for the menus
		#region Add-Type definition
		try
		{
			[SAPIENTypes.SAPIENColorTable] | Out-Null
		}
		catch
		{
			if ($PSVersionTable.PSVersion.Major -ge 7)
			{
				$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
			}
			else
			{
				$Assemblies = 'System.Windows.Forms', 'System.Drawing'
			}
			Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
		}
		#endregion
		
		$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
		$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
		[System.Windows.Forms.ToolStripManager]::Renderer = $render
		
		#Set up our processing queue
		$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
		$Queue.Enqueue($Control)
		
		Add-Type -AssemblyName System.Core
		
		#Only process the controls once.
		$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
		
		#Apply the colors to the controls
		while ($Queue.Count -gt 0)
		{
			$target = $Queue.Dequeue()
			
			#Skip controls we already processed
			if ($Processed.Contains($target)) { continue }
			$Processed.Add($target)
			
			#Set the text color
			$target.ForeColor = $ForeColor
			
			#region Handle Controls
			if ($target -is [System.Windows.Forms.Form])
			{
				#Set Font
				$target.Font = $Font
				$target.BackColor = $ContainerColor
			}
			elseif ($target -is [System.Windows.Forms.SplitContainer])
			{
				$target.BackColor = $BorderColor
			}
			elseif ($target -is [System.Windows.Forms.PropertyGrid])
			{
				$target.BackColor = $BorderColor
				$target.ViewBackColor = $BackColor
				$target.ViewForeColor = $ForeColor
				$target.ViewBorderColor = $BorderColor
				$target.CategoryForeColor = $ForeColor
				$target.CategorySplitterColor = $ContainerColor
				$target.HelpBackColor = $BackColor
				$target.HelpForeColor = $ForeColor
				$target.HelpBorderColor = $BorderColor
				$target.CommandsBackColor = $BackColor
				$target.CommandsBorderColor = $BorderColor
				$target.CommandsForeColor = $ForeColor
				$target.LineColor = $ContainerColor
			}
			elseif ($target -is [System.Windows.Forms.ContainerControl] -or
				$target -is [System.Windows.Forms.Panel])
			{
				#Set the BackColor for the container
				$target.BackColor = $ContainerColor
				
			}
			elseif ($target -is [System.Windows.Forms.GroupBox])
			{
				$target.FlatStyle = 'Flat'
			}
			elseif ($target -is [System.Windows.Forms.Button])
			{
				$target.FlatStyle = 'Flat'
				$target.FlatAppearance.BorderColor = $BorderColor
				$target.BackColor = $BackColor
			}
			elseif ($target -is [System.Windows.Forms.CheckBox] -or
				$target -is [System.Windows.Forms.RadioButton] -or
				$target -is [System.Windows.Forms.Label])
			{
				#$target.FlatStyle = 'Flat'
			}
			elseif ($target -is [System.Windows.Forms.ComboBox])
			{
				$target.BackColor = $BackColor
				$target.FlatStyle = 'Flat'
			}
			elseif ($target -is [System.Windows.Forms.TextBox])
			{
				$target.BorderStyle = 'FixedSingle'
				$target.BackColor = $BackColor
			}
			elseif ($target -is [System.Windows.Forms.DataGridView])
			{
				$target.GridColor = $BorderColor
				$target.BackgroundColor = $ContainerColor
				$target.DefaultCellStyle.BackColor = $WindowColor
				$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
				$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
				$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
				$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
				$target.EnableHeadersVisualStyles = $false
				$target.ColumnHeadersBorderStyle = 'Single'
				$target.RowHeadersBorderStyle = 'Single'
				$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
				$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
				
			}
			elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
			{
				$target.CaptionBackColor = $WindowColor
				$target.CaptionForeColor = $ForeColor
				$target.BackgroundColor = $ContainerColor
				$target.BackColor = $WindowColor
				$target.ForeColor = $ForeColor
				$target.HeaderBackColor = $ContainerColor
				$target.HeaderForeColor = $ForeColor
				$target.FlatMode = $true
				$target.BorderStyle = 'FixedSingle'
				$target.GridLineColor = $BorderColor
				$target.AlternatingBackColor = $ContainerColor
				$target.SelectionBackColor = $SelectionBackColor
				$target.SelectionForeColor = $SelectionForeColor
			}
			elseif ($target -is [System.Windows.Forms.ToolStrip])
			{
				
				$target.BackColor = $BackColor
				$target.Renderer = $render
				
				foreach ($item in $target.Items)
				{
					$Queue.Enqueue($item)
				}
			}
			elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
				$target -is [System.Windows.Forms.ToolStripDropDown] -or
				$target -is [System.Windows.Forms.ToolStripDropDownItem])
			{
				$target.BackColor = $BackColor
				foreach ($item in $target.DropDownItems)
				{
					$Queue.Enqueue($item)
				}
			}
			elseif ($target -is [System.Windows.Forms.ListBox] -or
				$target -is [System.Windows.Forms.ListView] -or
				$target -is [System.Windows.Forms.TreeView])
			{
				$target.BackColor = $WindowColor
			}
			else
			{
				$target.BackColor = $BackColor
			}
			#endregion
			
			if ($target -is [System.Windows.Forms.Control])
			{
				#Queue all the child controls
				foreach ($child in $target.Controls)
				{
					$Queue.Enqueue($child)
				}
				if ($target.ContextMenuStrip)
				{
					$Queue.Enqueue($target.ContextMenuStrip);
				}
			}
		}
	}
	#endregion
	
	$buttonCancel_Click = {
		[System.Windows.Forms.Application]::Exit()
	}
	
	$buttonQuery_Click = {
		#TODO: 
		if ($textbox1.text -ne $null)
		{
			get-odsysteminfo -computername ($textbox1.text) -showprogress | Select-Object -Property	*| Out-GridView
		}
	}
	
	
	$buttonQueryNIC_Click={
		#TODO: Place custom script here
		if ($textbox1.text -ne $null)
		{
			get-odsysteminfo -computername ($textbox1.text) -showprogress | Select-Object -ExpandProperty networkadapters | Out-GridView
		}
		
	}
	
	$buttonQueryDrives_Click={
		#TODO: Place custom script here
		if ($textbox1.text -ne $null)
		{
			get-odsysteminfo -computername ($textbox1.text) -showprogress | Select-Object -ExpandProperty localdrives | Out-GridView
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formViewODSystemInformat.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonQueryDrives.remove_Click($buttonQueryDrives_Click)
			$buttonQueryNIC.remove_Click($buttonQueryNIC_Click)
			$buttonQuery.remove_Click($buttonQuery_Click)
			$buttonCancel.remove_Click($buttonCancel_Click)
			$formViewODSystemInformat.remove_Load($formViewODSystemInformat_Load)
			$formViewODSystemInformat.remove_Load($Form_StateCorrection_Load)
			$formViewODSystemInformat.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
		$formViewODSystemInformat.Dispose()
		$textbox1.Dispose()
		$labelDNSNameOrIP.Dispose()
		$buttonCancel.Dispose()
		$buttonQuery.Dispose()
		$buttonQueryNIC.Dispose()
		$buttonQueryDrives.Dispose()
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formViewODSystemInformat.SuspendLayout()
	#
	# formViewODSystemInformat
	#
	$formViewODSystemInformat.Controls.Add($buttonQueryDrives)
	$formViewODSystemInformat.Controls.Add($buttonQueryNIC)
	$formViewODSystemInformat.Controls.Add($buttonQuery)
	$formViewODSystemInformat.Controls.Add($buttonCancel)
	$formViewODSystemInformat.Controls.Add($labelDNSNameOrIP)
	$formViewODSystemInformat.Controls.Add($textbox1)
	$formViewODSystemInformat.AutoScaleDimensions = New-Object System.Drawing.SizeF(8, 17)
	$formViewODSystemInformat.AutoScaleMode = 'Font'
	$formViewODSystemInformat.BackColor = [System.Drawing.SystemColors]::ButtonShadow 
	$formViewODSystemInformat.ClientSize = New-Object System.Drawing.Size(483, 144)
	$formViewODSystemInformat.ControlBox = $False
	$formViewODSystemInformat.Margin = '5, 5, 5, 5'
	$formViewODSystemInformat.Name = 'formViewODSystemInformat'
	$formViewODSystemInformat.StartPosition = 'CenterScreen'
	$formViewODSystemInformat.Text = ' OD SystemInfo'
	$formViewODSystemInformat.add_Load($formViewODSystemInformat_Load)
	#
	# buttonQueryDrives
	#
	$buttonQueryDrives.Location = New-Object System.Drawing.Point(133, 84)
	$buttonQueryDrives.Margin = '4, 4, 4, 4'
	$buttonQueryDrives.Name = 'buttonQueryDrives'
	$buttonQueryDrives.Size = New-Object System.Drawing.Size(100, 30)
	$buttonQueryDrives.TabIndex = 20
	$buttonQueryDrives.Text = 'Query Drives'
	$buttonQueryDrives.UseVisualStyleBackColor = $True
	$buttonQueryDrives.add_Click($buttonQueryDrives_Click)
	#
	# buttonQueryNIC
	#
	$buttonQueryNIC.Location = New-Object System.Drawing.Point(254, 84)
	$buttonQueryNIC.Margin = '4, 4, 4, 4'
	$buttonQueryNIC.Name = 'buttonQueryNIC'
	$buttonQueryNIC.Size = New-Object System.Drawing.Size(100, 30)
	$buttonQueryNIC.TabIndex = 19
	$buttonQueryNIC.Text = 'Query NIC'
	$buttonQueryNIC.UseVisualStyleBackColor = $True
	$buttonQueryNIC.add_Click($buttonQueryNIC_Click)
	#
	# buttonQuery
	#
	$buttonQuery.Location = New-Object System.Drawing.Point(371, 84)
	$buttonQuery.Margin = '4, 4, 4, 4'
	$buttonQuery.Name = 'buttonQuery'
	$buttonQuery.Size = New-Object System.Drawing.Size(100, 30)
	$buttonQuery.TabIndex = 18
	$buttonQuery.Text = 'Query'
	$buttonQuery.UseVisualStyleBackColor = $True
	$buttonQuery.add_Click($buttonQuery_Click)
	#
	# buttonCancel
	#
	$buttonCancel.Location = New-Object System.Drawing.Point(13, 84)
	$buttonCancel.Margin = '4, 4, 4, 4'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = New-Object System.Drawing.Size(100, 30)
	$buttonCancel.TabIndex = 17
	$buttonCancel.Text = 'Cancel'
	$buttonCancel.UseVisualStyleBackColor = $True
	$buttonCancel.add_Click($buttonCancel_Click)
	#
	# labelDNSNameOrIP
	#
	$labelDNSNameOrIP.AutoSize = $True
	$labelDNSNameOrIP.Location = New-Object System.Drawing.Point(13, 19)
	$labelDNSNameOrIP.Margin = '4, 0, 4, 0'
	$labelDNSNameOrIP.Name = 'labelDNSNameOrIP'
	$labelDNSNameOrIP.Size = New-Object System.Drawing.Size(113, 17)
	$labelDNSNameOrIP.TabIndex = 16
	$labelDNSNameOrIP.Text = 'DNS name or IP:'
	#
	# textbox1
	#
	$textbox1.Location = New-Object System.Drawing.Point(13, 53)
	$textbox1.Margin = '4, 4, 4, 4'
	$textbox1.MaxLength = 35
	$textbox1.Name = 'textbox1'
	$textbox1.Size = New-Object System.Drawing.Size(458, 23)
	$textbox1.TabIndex = 15
	$formViewODSystemInformat.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formViewODSystemInformat.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formViewODSystemInformat.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formViewODSystemInformat.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formViewODSystemInformat.ShowDialog()

} #End Function

#Call the form
Show-Getme_psf | Out-Null
