function Show-Getme_psf {

	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')

	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formViewODSystemInformat = New-Object 'System.Windows.Forms.Form'
	$buttonPermissionCheck = New-Object 'System.Windows.Forms.Button'
	$labelOR = New-Object 'System.Windows.Forms.Label'
	$labelNothingIsWorking = New-Object 'System.Windows.Forms.Label'
	$labelBoth = New-Object 'System.Windows.Forms.Label'
	$labelExamRoom = New-Object 'System.Windows.Forms.Label'
	$labelPretestRoom = New-Object 'System.Windows.Forms.Label'
	$labelInformation = New-Object 'System.Windows.Forms.Label'
	$buttonImportModule = New-Object 'System.Windows.Forms.Button'
	$buttonBaudFix = New-Object 'System.Windows.Forms.Button'
	$buttonLogoffUser = New-Object 'System.Windows.Forms.Button'
	$buttonDHCPFix = New-Object 'System.Windows.Forms.Button'
	$buttonPingODDevices = New-Object 'System.Windows.Forms.Button'
	$buttonMakeInstallFolders = New-Object 'System.Windows.Forms.Button'
	$buttonRevScanningFix = New-Object 'System.Windows.Forms.Button'
	$buttonQueryDrives = New-Object 'System.Windows.Forms.Button'
	$buttonQueryNIC = New-Object 'System.Windows.Forms.Button'
	$buttonQuery = New-Object 'System.Windows.Forms.Button'
	$buttonClose = New-Object 'System.Windows.Forms.Button'
	$labelDNSNameOrIP = New-Object 'System.Windows.Forms.Label'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$bindingsource1 = New-Object 'System.Windows.Forms.BindingSource'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'

	
	$formViewODSystemInformat_Load = {
		
		Set-ControlTheme $formViewODSystemInformat -Theme Dark
	}
	
	$darkToolStripMenuItem_Click = {
		
		Set-ControlTheme -Control $formViewODSystemInformat -Theme Dark
	}
	
	$lightToolStripMenuItem_Click = {
		Set-ControlTheme -Control $formViewODSystemInformat -Theme Light
	}
	
	function Set-ControlTheme
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.ComponentModel.Component]$Control,
			[ValidateSet('Light', 'Dark')]
			[string]$Theme = 'Dark',
			[System.Collections.Hashtable]$CustomColor
		)
		
		$Font = [System.Drawing.Font]::New('Segoe UI', 9)
		
		
		if ($Theme -eq 'Dark')
		{
			$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
			$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
			$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
			$ForeColor = [System.Drawing.Color]::White
			$BorderColor = [System.Drawing.Color]::DimGray
			$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
			$SelectionForeColor = [System.Drawing.Color]::White
			$MenuSelectionColor = [System.Drawing.Color]::DimGray
		}
		else
		{
			$WindowColor = [System.Drawing.Color]::White
			$ContainerColor = [System.Drawing.Color]::WhiteSmoke
			$BackColor = [System.Drawing.Color]::Gainsboro
			$ForeColor = [System.Drawing.Color]::Black
			$BorderColor = [System.Drawing.Color]::DimGray
			$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
			$SelectionForeColor = [System.Drawing.Color]::White
			$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
		}
		
		if ($CustomColor)
		{
			
			$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
			if ($Color) { $WindowColor = $Color }
			$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
			if ($Color) { $ContainerColor = $Color }
			$Color = $CustomColor.BackColor -as [System.Drawing.Color]
			if ($Color) { $BackColor = $Color }
			$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
			if ($Color) { $ForeColor = $Color }
			$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
			if ($Color) { $BorderColor = $Color }
			$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
			if ($Color) { $SelectionBackColor = $Color }
			$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
			if ($Color) { $SelectionForeColor = $Color }
			$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
			if ($Color) { $MenuSelectionColor = $Color }
		}
		
		
		try
		{
			[ODImagingTypes.ODImagingColorTable] | Out-Null
		}
		catch
		{
			if ($PSVersionTable.PSVersion.Major -ge 7)
			{
				$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
			}
			else
			{
				$Assemblies = 'System.Windows.Forms', 'System.Drawing'
			}
			Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace ODImagingTypes
{
    public class ODImagingColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public ODImagingColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
		}
		
		
		$colorTable = New-Object ODImagingTypes.ODImagingColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
		$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
		[System.Windows.Forms.ToolStripManager]::Renderer = $render
		
		
		$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
		$Queue.Enqueue($Control)
		
		Add-Type -AssemblyName System.Core
		
		
		$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
		
		
		while ($Queue.Count -gt 0)
		{
			$target = $Queue.Dequeue()
			
			
			if ($Processed.Contains($target)) { continue }
			$Processed.Add($target)
			
			
			$target.ForeColor = $ForeColor
			
			
			if ($target -is [System.Windows.Forms.Form])
			{
				
				$target.Font = $Font
				$target.BackColor = $ContainerColor
			}
			elseif ($target -is [System.Windows.Forms.SplitContainer])
			{
				$target.BackColor = $BorderColor
			}
			elseif ($target -is [System.Windows.Forms.PropertyGrid])
			{
				$target.BackColor = $BorderColor
				$target.ViewBackColor = $BackColor
				$target.ViewForeColor = $ForeColor
				$target.ViewBorderColor = $BorderColor
				$target.CategoryForeColor = $ForeColor
				$target.CategorySplitterColor = $ContainerColor
				$target.HelpBackColor = $BackColor
				$target.HelpForeColor = $ForeColor
				$target.HelpBorderColor = $BorderColor
				$target.CommandsBackColor = $BackColor
				$target.CommandsBorderColor = $BorderColor
				$target.CommandsForeColor = $ForeColor
				$target.LineColor = $ContainerColor
			}
			elseif ($target -is [System.Windows.Forms.ContainerControl] -or
				$target -is [System.Windows.Forms.Panel])
			{
				
				$target.BackColor = $ContainerColor
				
			}
			elseif ($target -is [System.Windows.Forms.GroupBox])
			{
				$target.FlatStyle = 'Flat'
			}
			elseif ($target -is [System.Windows.Forms.Button])
			{
				$target.FlatStyle = 'Flat'
				$target.FlatAppearance.BorderColor = $BorderColor
				$target.BackColor = $BackColor
			}
			elseif ($target -is [System.Windows.Forms.CheckBox] -or
				$target -is [System.Windows.Forms.RadioButton] -or
				$target -is [System.Windows.Forms.Label])
			{
				
			}
			elseif ($target -is [System.Windows.Forms.ComboBox])
			{
				$target.BackColor = $BackColor
				$target.FlatStyle = 'Flat'
			}
			elseif ($target -is [System.Windows.Forms.TextBox])
			{
				$target.BorderStyle = 'FixedSingle'
				$target.BackColor = $BackColor
			}
			elseif ($target -is [System.Windows.Forms.DataGridView])
			{
				$target.GridColor = $BorderColor
				$target.BackgroundColor = $ContainerColor
				$target.DefaultCellStyle.BackColor = $WindowColor
				$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
				$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
				$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
				$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
				$target.EnableHeadersVisualStyles = $false
				$target.ColumnHeadersBorderStyle = 'Single'
				$target.RowHeadersBorderStyle = 'Single'
				$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
				$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
				
			}
			elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
			{
				$target.CaptionBackColor = $WindowColor
				$target.CaptionForeColor = $ForeColor
				$target.BackgroundColor = $ContainerColor
				$target.BackColor = $WindowColor
				$target.ForeColor = $ForeColor
				$target.HeaderBackColor = $ContainerColor
				$target.HeaderForeColor = $ForeColor
				$target.FlatMode = $true
				$target.BorderStyle = 'FixedSingle'
				$target.GridLineColor = $BorderColor
				$target.AlternatingBackColor = $ContainerColor
				$target.SelectionBackColor = $SelectionBackColor
				$target.SelectionForeColor = $SelectionForeColor
			}
			elseif ($target -is [System.Windows.Forms.ToolStrip])
			{
				
				$target.BackColor = $BackColor
				$target.Renderer = $render
				
				foreach ($item in $target.Items)
				{
					$Queue.Enqueue($item)
				}
			}
			elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
				$target -is [System.Windows.Forms.ToolStripDropDown] -or
				$target -is [System.Windows.Forms.ToolStripDropDownItem])
			{
				$target.BackColor = $BackColor
				foreach ($item in $target.DropDownItems)
				{
					$Queue.Enqueue($item)
				}
			}
			elseif ($target -is [System.Windows.Forms.ListBox] -or
				$target -is [System.Windows.Forms.ListView] -or
				$target -is [System.Windows.Forms.TreeView])
			{
				$target.BackColor = $WindowColor
			}
			else
			{
				$target.BackColor = $BackColor
			}
			
			if ($target -is [System.Windows.Forms.Control])
			{
				
				foreach ($child in $target.Controls)
				{
					$Queue.Enqueue($child)
				}
				if ($target.ContextMenuStrip)
				{
					$Queue.Enqueue($target.ContextMenuStrip);
				}
			}
		}
	}
	
	
	$buttonClose_Click = {
		[System.Windows.Forms.Application]::Exit()
	}
	
	$buttonQuery_Click = {
		 
		if ($textbox1.text -ne $null)
		{
			get-odsysteminfo -computername ($textbox1.text) -showprogress | Select-Object -Property	*| Out-GridView
		}
	}
	
	
	$buttonQueryNIC_Click={
		
		if ($textbox1.text -ne $null)
		{
			get-odsysteminfo -computername ($textbox1.text) -showprogress | Select-Object -ExpandProperty networkadapters | Out-GridView
		}
		
	}
	
	$buttonQueryDrives_Click={
		
		if ($textbox1.text -ne $null)
		{
			get-odsysteminfo -computername ($textbox1.text) -showprogress | Select-Object -ExpandProperty localdrives | Out-GridView
		}
	}
	
	
	function Update-ListViewColumnSort
	{
	
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		
		try
		{
			[ListViewIteSmComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() 
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag 
		}
	}
	
	
	
	function Add-ListViewItem
	{
	
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	       
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	
	$buttonDHCPFix_Click={
		
	}
	
	$labelPretestRoom_Click={
		
		
	}
	
	$buttonLogoffUser_Click={
		
		
	}
	
	$buttonRevScanningFix_Click={
		
		
	}
	
	$buttonBaudFix_Click={
		
		
	}
	
	$buttonMakeInstallFolders_Click={
		
		
	}
	
	$buttonPingODDevices_Click={
		
		
	}
	
	$buttonImportModule_Click={
		
		
	}
	
	$buttonPermissionCheck_Click={
	
		
	}

	
	$Form_StateCorrection_Load=
	{
		$formViewODSystemInformat.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		
		try
		{
			$buttonPermissionCheck.remove_Click($buttonPermissionCheck_Click)
			$labelPretestRoom.remove_Click($labelPretestRoom_Click)
			$buttonImportModule.remove_Click($buttonImportModule_Click)
			$buttonBaudFix.remove_Click($buttonBaudFix_Click)
			$buttonLogoffUser.remove_Click($buttonLogoffUser_Click)
			$buttonDHCPFix.remove_Click($buttonDHCPFix_Click)
			$buttonPingODDevices.remove_Click($buttonPingODDevices_Click)
			$buttonMakeInstallFolders.remove_Click($buttonMakeInstallFolders_Click)
			$buttonRevScanningFix.remove_Click($buttonRevScanningFix_Click)
			$buttonQueryDrives.remove_Click($buttonQueryDrives_Click)
			$buttonQueryNIC.remove_Click($buttonQueryNIC_Click)
			$buttonQuery.remove_Click($buttonQuery_Click)
			$buttonClose.remove_Click($buttonClose_Click)
			$formViewODSystemInformat.remove_Load($formViewODSystemInformat_Load)
			$formViewODSystemInformat.remove_Load($Form_StateCorrection_Load)
			$formViewODSystemInformat.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
		$formViewODSystemInformat.Dispose()
		$textbox1.Dispose()
		$labelDNSNameOrIP.Dispose()
		$buttonClose.Dispose()
		$buttonQuery.Dispose()
		$buttonQueryNIC.Dispose()
		$buttonQueryDrives.Dispose()
		$buttonRevScanningFix.Dispose()
		$buttonMakeInstallFolders.Dispose()
		$buttonPingODDevices.Dispose()
		$buttonDHCPFix.Dispose()
		$bindingsource1.Dispose()
		$buttonLogoffUser.Dispose()
		$buttonBaudFix.Dispose()
		$buttonImportModule.Dispose()
		$labelInformation.Dispose()
		$labelPretestRoom.Dispose()
		$labelExamRoom.Dispose()
		$labelBoth.Dispose()
		$labelNothingIsWorking.Dispose()
		$labelOR.Dispose()
		$buttonPermissionCheck.Dispose()
	}

	$formViewODSystemInformat.SuspendLayout()
	$bindingsource1.BeginInit()

	$formViewODSystemInformat.Controls.Add($buttonPermissionCheck)
	$formViewODSystemInformat.Controls.Add($labelOR)
	$formViewODSystemInformat.Controls.Add($labelNothingIsWorking)
	$formViewODSystemInformat.Controls.Add($labelBoth)
	$formViewODSystemInformat.Controls.Add($labelExamRoom)
	$formViewODSystemInformat.Controls.Add($labelPretestRoom)
	$formViewODSystemInformat.Controls.Add($labelInformation)
	$formViewODSystemInformat.Controls.Add($buttonImportModule)
	$formViewODSystemInformat.Controls.Add($buttonBaudFix)
	$formViewODSystemInformat.Controls.Add($buttonLogoffUser)
	$formViewODSystemInformat.Controls.Add($buttonDHCPFix)
	$formViewODSystemInformat.Controls.Add($buttonPingODDevices)
	$formViewODSystemInformat.Controls.Add($buttonMakeInstallFolders)
	$formViewODSystemInformat.Controls.Add($buttonRevScanningFix)
	$formViewODSystemInformat.Controls.Add($buttonQueryDrives)
	$formViewODSystemInformat.Controls.Add($buttonQueryNIC)
	$formViewODSystemInformat.Controls.Add($buttonQuery)
	$formViewODSystemInformat.Controls.Add($buttonClose)
	$formViewODSystemInformat.Controls.Add($labelDNSNameOrIP)
	$formViewODSystemInformat.Controls.Add($textbox1)
	$formViewODSystemInformat.AutoScaleDimensions = New-Object System.Drawing.SizeF(8, 17)
	$formViewODSystemInformat.AutoScaleMode = 'Font'
	$formViewODSystemInformat.BackColor = [System.Drawing.SystemColors]::ButtonShadow 
	$formViewODSystemInformat.ClientSize = New-Object System.Drawing.Size(838, 350)
	$formViewODSystemInformat.ControlBox = $False
	$formViewODSystemInformat.Margin = '5, 5, 5, 5'
	$formViewODSystemInformat.Name = 'formViewODSystemInformat'
	$formViewODSystemInformat.StartPosition = 'CenterScreen'
	$formViewODSystemInformat.Text = ' OD SystemInfo'
	$formViewODSystemInformat.add_Load($formViewODSystemInformat_Load)

	$buttonPermissionCheck.Location = New-Object System.Drawing.Point(326, 9)
	$buttonPermissionCheck.Margin = '4, 4, 4, 4'
	$buttonPermissionCheck.Name = 'buttonPermissionCheck'
	$buttonPermissionCheck.Size = New-Object System.Drawing.Size(191, 30)
	$buttonPermissionCheck.TabIndex = 35
	$buttonPermissionCheck.Text = 'Permission Check'
	$buttonPermissionCheck.UseVisualStyleBackColor = $True
	$buttonPermissionCheck.add_Click($buttonPermissionCheck_Click)

	$labelOR.AutoSize = $True
	$labelOR.Location = New-Object System.Drawing.Point(550, 16)
	$labelOR.Margin = '4, 0, 4, 0'
	$labelOR.Name = 'labelOR'
	$labelOR.Size = New-Object System.Drawing.Size(29, 17)
	$labelOR.TabIndex = 34
	$labelOR.Text = 'OR'

	$labelNothingIsWorking.AutoSize = $True
	$labelNothingIsWorking.Location = New-Object System.Drawing.Point(138, 16)
	$labelNothingIsWorking.Margin = '4, 0, 4, 0'
	$labelNothingIsWorking.Name = 'labelNothingIsWorking'
	$labelNothingIsWorking.Size = New-Object System.Drawing.Size(135, 17)
	$labelNothingIsWorking.TabIndex = 33
	$labelNothingIsWorking.Text = 'Nothing is working?:'

	$labelBoth.AutoSize = $True
	$labelBoth.Location = New-Object System.Drawing.Point(611, 142)
	$labelBoth.Margin = '4, 0, 4, 0'
	$labelBoth.Name = 'labelBoth'
	$labelBoth.Size = New-Object System.Drawing.Size(37, 17)
	$labelBoth.TabIndex = 32
	$labelBoth.Text = 'Both'

	$labelExamRoom.AutoSize = $True
	$labelExamRoom.Location = New-Object System.Drawing.Point(404, 142)
	$labelExamRoom.Margin = '4, 0, 4, 0'
	$labelExamRoom.Name = 'labelExamRoom'
	$labelExamRoom.Size = New-Object System.Drawing.Size(83, 17)
	$labelExamRoom.TabIndex = 31
	$labelExamRoom.Text = 'Exam Room'

	$labelPretestRoom.AutoSize = $True
	$labelPretestRoom.Location = New-Object System.Drawing.Point(210, 142)
	$labelPretestRoom.Margin = '4, 0, 4, 0'
	$labelPretestRoom.Name = 'labelPretestRoom'
	$labelPretestRoom.Size = New-Object System.Drawing.Size(94, 17)
	$labelPretestRoom.TabIndex = 30
	$labelPretestRoom.Text = 'Pretest Room'
	$labelPretestRoom.add_Click($labelPretestRoom_Click)

	$labelInformation.AutoSize = $True
	$labelInformation.Location = New-Object System.Drawing.Point(25, 142)
	$labelInformation.Margin = '4, 0, 4, 0'
	$labelInformation.Name = 'labelInformation'
	$labelInformation.Size = New-Object System.Drawing.Size(78, 17)
	$labelInformation.TabIndex = 29
	$labelInformation.Text = 'Information'

	$buttonImportModule.ForeColor = [System.Drawing.SystemColors]::Highlight 
	$buttonImportModule.Location = New-Object System.Drawing.Point(611, 9)
	$buttonImportModule.Margin = '4, 4, 4, 4'
	$buttonImportModule.Name = 'buttonImportModule'
	$buttonImportModule.Size = New-Object System.Drawing.Size(213, 30)
	$buttonImportModule.TabIndex = 27
	$buttonImportModule.Text = 'Import Module'
	$buttonImportModule.UseVisualStyleBackColor = $True
	$buttonImportModule.add_Click($buttonImportModule_Click)

	$buttonBaudFix.Location = New-Object System.Drawing.Point(382, 211)
	$buttonBaudFix.Margin = '4, 4, 4, 4'
	$buttonBaudFix.Name = 'buttonBaudFix'
	$buttonBaudFix.Size = New-Object System.Drawing.Size(135, 30)
	$buttonBaudFix.TabIndex = 26
	$buttonBaudFix.Text = 'Baud Fix'
	$buttonBaudFix.UseVisualStyleBackColor = $True
	$buttonBaudFix.add_Click($buttonBaudFix_Click)

	$buttonLogoffUser.Location = New-Object System.Drawing.Point(563, 211)
	$buttonLogoffUser.Margin = '4, 4, 4, 4'
	$buttonLogoffUser.Name = 'buttonLogoffUser'
	$buttonLogoffUser.Size = New-Object System.Drawing.Size(153, 30)
	$buttonLogoffUser.TabIndex = 25
	$buttonLogoffUser.Text = 'Logoff User'
	$buttonLogoffUser.UseVisualStyleBackColor = $True
	$buttonLogoffUser.add_Click($buttonLogoffUser_Click)

	$buttonDHCPFix.Location = New-Object System.Drawing.Point(382, 173)
	$buttonDHCPFix.Margin = '4, 4, 4, 4'
	$buttonDHCPFix.Name = 'buttonDHCPFix'
	$buttonDHCPFix.Size = New-Object System.Drawing.Size(135, 30)
	$buttonDHCPFix.TabIndex = 24
	$buttonDHCPFix.Text = 'DHCP Fix'
	$buttonDHCPFix.UseVisualStyleBackColor = $True
	$buttonDHCPFix.add_Click($buttonDHCPFix_Click)

	$buttonPingODDevices.Location = New-Object System.Drawing.Point(166, 173)
	$buttonPingODDevices.Margin = '4, 4, 4, 4'
	$buttonPingODDevices.Name = 'buttonPingODDevices'
	$buttonPingODDevices.Size = New-Object System.Drawing.Size(186, 30)
	$buttonPingODDevices.TabIndex = 23
	$buttonPingODDevices.Text = 'Ping OD Devices'
	$buttonPingODDevices.UseVisualStyleBackColor = $True
	$buttonPingODDevices.add_Click($buttonPingODDevices_Click)

	$buttonMakeInstallFolders.Location = New-Object System.Drawing.Point(166, 211)
	$buttonMakeInstallFolders.Margin = '4, 4, 4, 4'
	$buttonMakeInstallFolders.Name = 'buttonMakeInstallFolders'
	$buttonMakeInstallFolders.Size = New-Object System.Drawing.Size(186, 30)
	$buttonMakeInstallFolders.TabIndex = 22
	$buttonMakeInstallFolders.Text = 'Make Install Folders'
	$buttonMakeInstallFolders.UseVisualStyleBackColor = $True
	$buttonMakeInstallFolders.add_Click($buttonMakeInstallFolders_Click)

	$buttonRevScanningFix.Location = New-Object System.Drawing.Point(563, 173)
	$buttonRevScanningFix.Margin = '4, 4, 4, 4'
	$buttonRevScanningFix.Name = 'buttonRevScanningFix'
	$buttonRevScanningFix.Size = New-Object System.Drawing.Size(153, 30)
	$buttonRevScanningFix.TabIndex = 21
	$buttonRevScanningFix.Text = 'Rev Scanning Fix'
	$buttonRevScanningFix.UseVisualStyleBackColor = $True
	$buttonRevScanningFix.add_Click($buttonRevScanningFix_Click)
	
	$buttonQueryDrives.Location = New-Object System.Drawing.Point(12, 249)
	$buttonQueryDrives.Margin = '4, 4, 4, 4'
	$buttonQueryDrives.Name = 'buttonQueryDrives'
	$buttonQueryDrives.Size = New-Object System.Drawing.Size(113, 30)
	$buttonQueryDrives.TabIndex = 20
	$buttonQueryDrives.Text = 'Query Drives'
	$buttonQueryDrives.UseVisualStyleBackColor = $True
	$buttonQueryDrives.add_Click($buttonQueryDrives_Click)

	$buttonQueryNIC.Location = New-Object System.Drawing.Point(12, 211)
	$buttonQueryNIC.Margin = '4, 4, 4, 4'
	$buttonQueryNIC.Name = 'buttonQueryNIC'
	$buttonQueryNIC.Size = New-Object System.Drawing.Size(113, 30)
	$buttonQueryNIC.TabIndex = 19
	$buttonQueryNIC.Text = 'Query NIC'
	$buttonQueryNIC.UseVisualStyleBackColor = $True
	$buttonQueryNIC.add_Click($buttonQueryNIC_Click)

	$buttonQuery.Location = New-Object System.Drawing.Point(12, 173)
	$buttonQuery.Margin = '4, 4, 4, 4'
	$buttonQuery.Name = 'buttonQuery'
	$buttonQuery.Size = New-Object System.Drawing.Size(113, 30)
	$buttonQuery.TabIndex = 18
	$buttonQuery.Text = 'Query'
	$buttonQuery.UseVisualStyleBackColor = $True
	$buttonQuery.add_Click($buttonQuery_Click)

	$buttonClose.ForeColor = [System.Drawing.Color]::Red 
	$buttonClose.Location = New-Object System.Drawing.Point(712, 301)
	$buttonClose.Margin = '4, 4, 4, 4'
	$buttonClose.Name = 'buttonClose'
	$buttonClose.Size = New-Object System.Drawing.Size(112, 30)
	$buttonClose.TabIndex = 17
	$buttonClose.Text = 'Close'
	$buttonClose.UseVisualStyleBackColor = $True
	$buttonClose.add_Click($buttonClose_Click)

	$labelDNSNameOrIP.AutoSize = $True
	$labelDNSNameOrIP.Location = New-Object System.Drawing.Point(12, 100)
	$labelDNSNameOrIP.Margin = '4, 0, 4, 0'
	$labelDNSNameOrIP.Name = 'labelDNSNameOrIP'
	$labelDNSNameOrIP.Size = New-Object System.Drawing.Size(113, 17)
	$labelDNSNameOrIP.TabIndex = 16
	$labelDNSNameOrIP.Text = 'DNS name or IP:'

	$textbox1.Location = New-Object System.Drawing.Point(173, 100)
	$textbox1.Margin = '4, 4, 4, 4'
	$textbox1.MaxLength = 35
	$textbox1.Name = 'textbox1'
	$textbox1.Size = New-Object System.Drawing.Size(475, 23)
	$textbox1.TabIndex = 15

	$bindingsource1.EndInit()
	$formViewODSystemInformat.ResumeLayout()

	$InitialFormWindowState = $formViewODSystemInformat.WindowState

	$formViewODSystemInformat.add_Load($Form_StateCorrection_Load)
	$formViewODSystemInformat.add_FormClosed($Form_Cleanup_FormClosed)
	
	return $formViewODSystemInformat.ShowDialog()

} 


Show-Getme_psf | Out-Null
